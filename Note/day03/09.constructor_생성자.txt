1.Constructor란?
  ① 특별한 method이다.
  ② 반드시 method이름이 class이름과 같다. (method이름이 대문자로 시작) 
  ③ 일반적인 method선언과 같지만 returnType 자리가 없다. 
       ⇨ modifier class이름( [ dataType 변수이름, ... ] ){ } 
  ④ 객체가 생성(new)되는 시점에 딱 한번 호출한다. 
  ⑤ java의 모든 객체는 반드시 한 개 이상의 생성자를 갖는다. 
  ⑥ Overloading이 가능하다. 
  ⑦ 프로그래머가 생성자를 하나도 작성하지 않으면 default 생성자가 만들어진다. 
     ⇨ modifier class이름( ){ }

     
  2. 객체 생성되는 시점에 하는 일
  ㉠ 전역변수를 0에 준하는 값으로 초기화 ex) int i; ⇨ 0 
  ㉡ 전역변수를 명시적 초기화 (프로그래머가 직접 값을 입력) ex) int i=5; 
  ㉢ 생성자 구현부 실행   
  
  3. 같은 class내에서 다른 생성자 호출 방법
     this([값, 값, ... ]); ⇨ 반드시 생성자 구현부 첫 번째 줄에서만 가능
     
 
 =====================================================================================    
  * 싱글톤 클래스 만들기
   1) private 생서자를 만든다.
   2) 현재 객체에서 직접 객체를 생성해서 리턴해주는 메소드는 작성한다(static메소드)
   3) 맴버필드에서 현재객체를 생성하는 static 맴버를 만들고 2)메소드에서 리턴해준다. 
   
      
 class Test{
    private static Test t  = new Test();
     //외부에서 객체생성 막는다.
     private Test(){  //현재클래스내에서 접근가능!!

      } 
      //현재 객체를 직접생성해서 리턴해준다.
      public static Test getInstance( ){
           return t;
     }
 }


-------------------------------------
  new Test(); //외부에서 생성안됨!!

   Test  t1 = Test.getInstance( ); //제공된 형태대로 Test객체를 사용할수 있다.
   Test  t2 = Test.getInstance( ); 
   Test  t3 = Test.getInstance( ); 



================================================
public class Test{
	public Test(){
		this("하이"); //String 하나 받는 생성자 호출
		System.out.println(1);
		this(3); //X 하나의 생성자에서 생성자를 두번 호출 못함
	}
	public Test(int i){// 오버로딩
		System.out.println(2);
	}
	Test (String s){
		System.out.println(3);
	}
}

 
* 객체 생성 방법
new class 이름(	);
==================================================

생성자를 왜 쓸까?
   : 객체가 생성되는 시점에 해야 할 일이 있다면 생성자에 작성해 놓으면 호출하지 않아도 자동 호출되어
    일을 하게된다.
어떨 때 써야 하는가?
   : 객체의 데이터를 초기화 할 때 가장 많이 사용
   : 데이터를 로딩, 환경 세팅




* 이름을 관리하고 싶다!!
	String name; //25명...

=> String names[] = new String [25];
=> int ages [] = new int [25];
=> String addrs [] = new String [25];

//속성을 관리 할 객체를 만들자 = VO(Value Object), DTO(Data Transfer Object), Domain 
//클래스 이름을 모호하게 만들어선 안 된다 

class Student { //한명의 학생을 관리 
	//학생이 가질 수 있는 속성 선언 = Field 
	String name;
	int age;
	String addr;
	
	Student(String name, int age, String addr){
	   this.name = name;
	   this.age = age;
	   this.addr = addr;
		} //자동 삽입
 
}

1. 멤버 필드들을 초기화 
2. 생성자 (자동 삽입)
3. 속성들 세팅


 // 학생 한명 생성해보자
//Student st1 = new Student();
Student st1 = new Student("희정", 20, "서울"); //인수 3개 받는 생성자 호출
Student st1 = new Student("지은", 26, "서울");

//정수형 5개 관리할 배열
in [] arr = new int [5];

//학생 = Student 5명을 관리할 배열 만들자.
Student [] stArr = new Student[5];
stArr의 초기값은 모두 null , stArr이 5개 크기의 배열의 주소를 가리키고 있음 
	stArr[0] = new Student("희정", 20, "서울");

     