1. 메소드 특징
 ① 객객체 안에 선언되어 객체가 가지고 있는 기능이다.
 ② 반드시 class내부에 선언된다.
 ③ 호출해서 사용한다.(호출되기 전에는 실행 안됨.)
 ④ 재귀호출가능(자기 자신 안에서 자신을 호출)
 ⑤ Method 마지막 구현부에서 return 할 수 있다.
   (특정한 값을 호출한 주체에게 return 한다.)
 ⑥ 재사용 목적 – 코드의 중복을 피할 수 있다



 2.  메소드 작성법
  modifiers returnType method이름( [DataType 변수이름, DataType 변수이름, ...] ){
       기능구현 ;
  }



   접근제한자 [기타제한자]  리턴타입 메소드이름(데이터타입 변수이름, 데이터타입 변수이름,...){


            [return 가지고갈값] ; // 리턴타입이 void가 아닌경우
   }
   

   - 접근제한자(access modifier)  : public > protected > 생략 > private 
   - 기타제한자 : static , final , abstract , synchronized
   - 리턴타입 :  void , 기본형, 객체타입 
   - 메소드이름 : identifier 작성규칙에 의해 개발자가 만드는 이름.
   - 괄호안을 매개변수=인수=파라미터=아규먼트 :  호출하는사람이 가지고 들어오는 값을 담을 변수 선언.

   - {} 안을 메소드 구현부 = body : 필요한 기능 작성한다.  


 3.  메소드 호출방법 
    :   2) -> 3) -> 1) 순서대로 해본다.

    1) 객체를 생성해서 접근하는 방법
       -호출하려는 메소드를 감싸고 있는 클래스를 생성한다.
       클래스이름 변수이름   = new 클래스이름();
            변수이름.메소드이름(인수값, 인수값,....); //호출한 메소드가 리턴값이 없을때
            리턴타입 변수 = 변수이름.메소드이름(인수값, 인수값,....); //만약 호출한메소드가 리턴값이 있다면...


    2) static붙은 메소드 호출하는 방법
       - 객체생성 하지 않고 
             클래스이름.메소드이름(인수값, ....);

             ex)  Math.random();
                  Integer.parseInt(문자열);


    3) 같은클래스 내부에서 메소드 호출방법
        : this.메소드이름(인수값, 인수값....);  //this. 은 생략도 가능하다.
-----------------------------------------------------------------------------------------------------------------------------------


